package de.tub.util;

import java.io.File;
import java.io.FileFilter;

/**
 * This class provides convenience methods for handling 
 * files.
 * 
 * @author Sebastian Oelke
 *
 */
public class FileUtil {
	
	/**
	 * Holds names of files generated by ELKI during the 
	 * clustering process that are no cluster files.
	 */
	private static final String[] nonClusterFiles = 
		{"cluster-evaluation.txt", "clusterobjectorder.txt",
		 "main.txt", "optics-clusterorder.txt",
		 "xi-steep-areas.txt"};
	
	/**
	 * Returns a <code>FileFilter</code> that filters
	 * out dot files (i.e., files starting with a '.') and accepts 
	 * files and/or directories depending on the parameters
	 * <code>acceptDirectories</code> and <code>acceptFiles</code>.
	 * 
	 * @param acceptDirectories if <code>true</code> visible directories are accepted, otherwise they are not
	 * @param acceptFiles if <code>true</code> visible files are accepted, otherwise they are not
	 * @return an instance of <code>FileFilter</code>
	 */
	public static FileFilter acceptVisibleFilesFilter(final boolean acceptDirectories, final boolean acceptFiles) {
		return new FileFilter() {
			
			@Override
			public boolean accept(File file) {
				boolean fileIsHidden = file.isHidden();
				if (!acceptDirectories && !acceptFiles) 
					return false;
				else if (acceptDirectories && acceptFiles)
					return !fileIsHidden;
				else if (!acceptDirectories && acceptFiles)
					return !fileIsHidden && file.isFile();
				else if (acceptDirectories && !acceptFiles)
					return !fileIsHidden && file.isDirectory();
				else
					return false;
			}
		};
	}
	
	/**
	 * Returns a <code>FileFilter</code> that filters
	 * out all files that are no cluster files as generated
	 * by ELKI. Those are:
	 * <ul>
	 * <li>cluster-evaluation.txt,</li>
	 * <li>clusterobjectorder.txt,</li>
	 * <li>main.txt,</li>
	 * <li>optics-clusterorder.txt and</li>
	 * <li>xi-steep-areas.txt.</li>
	 * </ul>
	 * Hidden files are not accepted by this filter.
	 * 
	 * @return an instance of <code>FileFilter</code>
	 */
	public static FileFilter acceptOnlyClusterFilesFilter() {
		return new FileFilter() {
			
			@Override
			public boolean accept(File file) {
				// Get name of file to test
				String name = file.getName();
				
				// Check if the given file is a cluster file or not
				for (int i = 0; i < nonClusterFiles.length; i++)
					if (nonClusterFiles[i].equals(name)) return false;
				
				// Only accept visible files
				return !file.isHidden();
			}
		};
	}
	
	/**
	 * Tests if a directory with the given path exists. If it does not
	 * it is created.
	 * 
	 * @param dir the path to the directory to create.
	 * @return <code>true</code> if the directory could be created, otherwise <code>false</code>.
	 */
	public static boolean ifNotExistCreateDir(String dir) {
		if (dir == null || dir.isEmpty()) return false;
		
		File directory = new File(dir);
		
		if (!directory.exists())
			return directory.mkdir();
		else
			return true;
	}
	
	/**
	 * Deletes the directory or file with the given path 
	 * and all its children.
	 * 
	 * @param path the name of the file to delete.
	 */
	public static void deleteFileOrDirectory(String path) {
		File file = new File(path);
		deleteFileOrDirectory(file);
	}
	
	/**
	 * Deletes the given directory or file and all its children.
	 * 
	 * @param file the file to delete.
	 */
	public static void deleteFileOrDirectory(File file) {
		if (file == null || !file.exists()) return;

        if (file.isDirectory()) {
            for (File child : file.listFiles()) {
                deleteFileOrDirectory(child);
            }
        }
        file.delete();
	}
	
}
